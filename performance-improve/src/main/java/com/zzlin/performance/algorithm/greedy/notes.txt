贪心算法
在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法，叫作贪心算法。
也就是说，不从整体最优上加以考虑，所做出的是在某种意义上的局部最优解。
局部最优 —?-> 整体最优

贪心算法的在笔试时的解题套路
1，实现一个不依靠贪心策略的解法X，可以用最暴力的尝试
2，脑补出贪心策略A、贪心策略B、贪心策略C...
3，用解法X和对数器，去验证每一个贪心策略，用实验的方式得知哪个贪心策略正确
4，不要去纠结贪心策略的证明
根据心理的一个标准依次考虑每一个样本

题目一：
一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲。
给你每一个项目开始的时间和结束的时间(给你一个数组，里面是一个个具体的项目)，你来安排宣讲的日程，要求会议室进行的宣讲的场次最多。
返回这个最多的宣讲场次。

策略：
1、最先开始的会议
2、会议时间最短的会议
3、结束时间最早的会议（局部最优）

题目二（哈夫曼编码问题）：
一块金条切成两半，是需要花费和长度数值一样的铜板的。比如长度为20的金条，不管切成长度多大的两半，都要花费20个铜板。
一群人想整分整块金条，怎么分最省铜板?
例如,给定数组{10,20,30]，代表一共三个人，整块金条长度为10+20+30=60。金条要分成10,20,30三个部分。
如果先把长度60的金条分成10和50，花费60;再把长度50的金条分成20和30，花费50;一共花费110铜板。
但是如果先把长度60的金条分成30和30，花费60:再把长度30金条分成10和20花费30;一共花费90铜板。



题目三：
输入
正数数组costs
正数数组profits
正数k
正m
含义:
costs[i]表示i号项目的花费，profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)
k表示你只能串行的最多做k个项目，m表示你初始的资金
说明:
你每做完一个项目，马上获得的收益，可以支持你去做下一个项目，项目不可重复做
输出:你最后获得的最大钱数


暴力递归就是尝试
1、把问题转化为规模缩小了的同类问题的子问题
2,有明确的不需要继续进行递归的条件(base case)
3、有当得到了子问题的结果之后的决策过程
4、不记录每一个子问题的解
一定要学会怎么去尝试，因为这是动态规划的基础，这一内容我们将在提升班讲述。

汉诺塔问题：将一根杆上的不同大小圆盘移动到另外一个圆盘，一次只能移动一个圆盘，小的圆盘上不可以放更大的圆盘。
打印n层汉诺塔从最左边移动到最右边的全部过程

打印一个字符串的全部子序列，包括空字符串



