哈希表: HashSet, HashMap
有序表: TreeSet, TreeMap

单链表的节点结构
Class Node<V> {
  V value;
  Node next;
}
由以上结构的节点依次连接起来所形成的链叫单链表结构。
双链表的节点结构
Class Node<V> {
  V value;
  Node next;
  Node last;
}
由以上结构的节点依次连接起来所形成的链叫双链表结构。
单链表和双链表结构只需要给定一个头部节点head，就可以找到剩下的所有的节点。

面试时链表解题的方法论
1) 对于笔试，不用太在乎空间复杂度，一切为了时间复杂度
2) 对于面试，时间复杂度依然放在第一位，但是一定要找到空间最省的方法
重要技巧:
1) 额外数据结构记录（哈希表等)
2) 快慢指针

1、反转单向与双向链表，时间复杂度O(N)，空间复杂度O(1)

2、打印两个有序链表的公共部分
  【题目】给定两个有序链表的头指针head1和head2，打印两个链表的公共部分。
  【要求】如果两个链表的长度之和为N，时间复杂度要求为0(N)，额外空间复杂度要求为0(1)
  解题：head1和head2指向的数比较
    指向的数相等：打印结果，都向下移动
    指向的数不相等：较小的指针向下移动
    某一个指到了最后：结束

3、判断一个链表是否为回文结构
  【题目】给定一个单链表的头节点head，请判断该链表是否为回文结构。
  【例子】1->2->1，返回true;1->2->2->1，返回true; 15->6->15，返回true;1->2->3，返回false。
  【例子】如果链表长度为N，时间复杂度达到0(N)，额外空间复杂度达到0(1)。
  笔试：把节点依次入栈，然后再从头开始遍历
  面试：快慢指针

4、将单向链表按某值划分成左边小、中间相等、右边大的形式
  【题目】给定一个单链表的头节点head，节点的值类型是整型，再给定一个整数pivot。实现一个调整链表的函数
         将链表调整为左部分都是值小于pivot的节点，中间部分都是值等于pivot的节点，右部分都是值大于pivot的节点。
  【进阶】在实现原问题功能的基础上增加如下的要求
  【要求】调整后所有小于pivot的节点之间的相对顺序和调整前一样
  【要求】调整后所有等于pivot的节点之间的相对顺序和调整前一样
  【要求】调整后所有大于pivot的节点之间的相对顺序和调整前一样
  【要求】时间复杂度请达到o(N)，额外空间复杂度请达到0(1)。
  笔试：将链表所有节点放到数组中进行partition，结束后在把数组中的节点重新串起来
  面试：使用6个变量，小于区域的开始和结束、等于区域的开始和结束、大于区域的开始和结束
    smallHead smallTail equalsHead equalsTail bigHead bigTail

















