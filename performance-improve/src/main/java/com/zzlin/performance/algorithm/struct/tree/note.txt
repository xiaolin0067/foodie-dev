二叉树节点结构
class Node<V>{
  V value;
  Node left;
  Node right;
}
一、
用递归和非递归两种方式实现二叉树的先序、中序、后序遍历
如何直观的打印一颗二叉树
如何完成二叉树的宽度优先遍历(常见题目:求一棵二叉树的宽度)
     1
    /  \
   2    3
  / \  / \
 4   5 6  7
递归的方法遍历，每个节点都会回到三次，其递归序为：
  1,
  2,
  4,4,4,
  2,
  5,5,5,
  2,
  1,
  3,
  6,6,6,
  3,
  7,7,7,
  3,
  1
先序遍历（深度优先遍历），对于每一颗子树的打印顺序：头左右。在每个节点第一次进入时打印，不是第一次进入节点什么也不做
中序遍历，对于每一颗子树的打印顺序：左头右。在每个节点第二次进入时打印，不是第二次进入节点什么也不做
后序遍历，对于每一颗子树的打印顺序：左右头。在每个节点第三次进入时打印，不是第三次进入节点什么也不做
宽序遍历：1,2,3,4,5,6,7