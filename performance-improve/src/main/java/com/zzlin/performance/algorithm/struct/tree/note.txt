二叉树节点结构
class Node<V>{
  V value;
  Node left;
  Node right;
}
一、
用递归和非递归两种方式实现二叉树的先序、中序、后序遍历
如何直观的打印一颗二叉树
如何完成二叉树的宽度优先遍历(常见题目:求一棵二叉树的宽度)
     1
    /  \
   2    3
  / \  / \
 4   5 6  7
递归的方法遍历，每个节点都会回到三次，其递归序为：
  1,
  2,
  4,4,4,
  2,
  5,5,5,
  2,
  1,
  3,
  6,6,6,
  3,
  7,7,7,
  3,
  1
先序遍历（深度优先遍历），对于每一颗子树的打印顺序：头左右。在每个节点第一次进入时打印，不是第一次进入节点什么也不做
中序遍历，对于每一颗子树的打印顺序：左头右。在每个节点第二次进入时打印，不是第二次进入节点什么也不做
后序遍历，对于每一颗子树的打印顺序：左右头。在每个节点第三次进入时打印，不是第三次进入节点什么也不做
宽序遍历：1,2,3,4,5,6,7

如何判断一颗二叉树是否是搜索二叉树?
  搜索二叉树所有节点值不重复，左子节点比他小，右子节点比他大
  实现方式：中序遍历，结果升序即为搜索二叉树
如何判断一颗二叉树是完全二叉树?
  树的每一层都是满的，若不满也是最后一层从左往右是满的，后面缺失几个
  宽度优先遍历，判断条件：
    1、任一节点有右无左，即非完全二叉树
    2、在条件1下，遇到的第一个子节点不全的的节点，其后续节点应该全是叶节点，否则非完全二叉树
如何判断一颗二叉树是否是满二叉树?
  N = (2 ^ L) -1
  N：节点数，L：树的深度，层数
如何判断一颗二叉树是否是平衡二叉树?(二叉树题目套路)
  解题思路：左子树是平衡二叉树，右子树是平衡二叉树，左右子树高度差不超过1
    从左子树中获取信息：是否是平衡二叉树、高度
    从右子树中获取信息：是否是平衡二叉树、高度
  解题套路：使用递归，从左右子树中获得信息，将信息组装成自己的信息，可以解决一切树型DP(动态规划)问题
    只有从左右子树获得能满足要求的信息才能使用这种方法，不要用该方法的问题例如判断完全二叉树，求树所有节点的中位数，即要满足最优子结构性质
    能解决绝大部分面试中的树相关的问题
  使用该方式解决搜索二叉树：
    节点需要大于左子树的最大值，小于右子树的最小值，左右子树均为二叉搜索树
    需要的信息：子树是否为搜索二叉树、子树的最大值，子树的最小值

给点一个二叉树中的两个节点node1, node2，找到他们的最低公共祖先 leetcode 236
  遍历树，将所有节点和其父节点放到Map中
  遍历node1的所有父节点都放入HashSet中
  遍历node2的父节点，若其存在于node1的父节点HashSet中，即为结果

