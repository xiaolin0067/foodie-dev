JDK内置工具
  内置工具包括了JDK中提供的常用监控工具以及故障排查工具，主要包括了：
监控工具
  jps
    -q 仅展示进程号
    -m 展示传提给main方法的参数
    -l 启动类的完整包名
    -v 显示传递给jvm的参数
    远程查看其他机器的进程，使用rmi协议，端口1099
    jps -l remote.domain
    jps -l rmi://remote.domain:1231
  jstat
    可以查看堆内存各部分的使用量，以及加载类的数量
    统计gc信息
    jstat -gcutil [pid] [interval millisecond]

    -class 显示有关类加载器行为的统计信息
    -compiler 显示有关Java HotSpot VM Just-in-Time(JIT)编译器行为的统计信息
    -gc 显示有关垃圾收集堆行为的统计信息
    -gccapacity 显示各区大小
    -gccause 最近一次GC统计和原因
    -gcnew 显示新生代行为的统计信息
    -gcnewcapacity 显示有关新生代大小及其对应空间的统计信息
    -gcold 显示有关老年代行为的统计信息和元空间统计信息
    -gcoldcapacity 显示老年代大小
    -gcmetacapacity 显示有关元空间大小的统计信息
    -gcutil 显示有关垃圾收集统计信息的摘要
    -printcompilation 显示Java HotSpot VM编译方法统计信息
故障排查工具
  jinfo
    查看系统参数和进程JVM参数，热更新部分JVM参数
  jmap
    分析堆内存，可dump堆内存快照，统计堆对象数量和大小，类加载情况
    -clstats 连接到正在运行的进程，并打印Java堆的类加载器统计信息
    -finalizerinfo 连接到正在运行的进程，并打印等待finalization的对象的信息
    分析内存，统计堆中对象大小和数量，按大小倒序输出
    jmap -histo [pid] | less
	只统计存活的对象
	jmap -histo:live [pid] | less
	dump堆内存快照，带上live会触发一次Full GC
	jmap -dump:live,format=b,file=filename <pid>
	要想获取Java堆Dump，除使用jmap外，还有以下方法:
      使用-XX:+HeapDumpOnOutOfMemoryError，让虚拟机在OOM异常出现后自动生成堆Dump文件
      使用-XX:+HeapDumpOnCtrlBreak，可使用[Ctrl]+[Break]，让虚拟机生成堆Dump文件
      在Linux操作系统下，发送kill -3 pid命令
      对于spring Boot应用，也可以使用Spring Boot Actuator提供的/actuator/heapdump实现堆Dump。
  jstack (Stack Trace for java)
    分析线程堆栈信息，dump线程快照(线程快照也叫Thread Dump或者javacore文件)
    -l 在线程堆栈信息后显示有关锁的额外信息
    -e 展示有关线程的额外信息(比如分配了多少内存、定义了多少个类等等)
  jcmd (JVM Command)
    将诊断命令发送到运行的虚拟机
    性能计数器
    jcmd [pid] PerfCounter.print
    代码缓存的布局和边界
    jcmd [pid] Compiler.codecache
    dump堆内存
    jcmd [pid] GC.heap_dump -all filename.hprof
    打印带有堆栈跟踪的线程，与jstack类似
    jcmd [pid] Thread.print -l
    可录制JFR信息
  jhat (JVM Heap Analysis Tool)，用来分析jmap生成的堆Dump文件，jdk11已废弃，可用VisualVM或Memory Analyzer Tool代替
  jhsdb (Java Hotspot Debugger)
    Hotspot进程调试器，用于从崩溃的JVM附加到Java进程或核心转储，Java9才引入
    Java8开启方式：
      chmod +x $JAVA_HOME/lib/sa-jdi.jar
      # 交互式命令行启动(jhasdb clhsdb)
      java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB
        flags: 展示所有-XX开始的参数
      # 交互式GUI调试器启动(jhasdb hsdb)
      java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB
可视化工具
  jhsdb
    jdk内置图形管理界面监控
    jhsdb hsdb --pid [pid]
    可以查看内存区域地址有哪些对象，以及对象的详细信息
  jconsole
    jdk内置图形管理界面监控
    概览 内存 线程 类 VM概要 MBean
  VisualVM
    java8及以前的版本，jdk内置图形管理界面监控，9及以上的版本需要下载
    jvisualvm
    查看堆内存，线程信息，可直接dump快照
    取样器：分析热点方法
    profiler：提供程序运行期方法级的处理器执行时间分析以及内存分析
  JDK Mission Control(JMC)，商业授权工具，Java8收费，Java11中任何人可使用，https://jdk.java.net/jmc/
    作为JMX(Java Management Extensions，即Java管理扩展)控制台， 监控虚拟机MBean提供的数据
    可持续收集数据的JFR (Java Flight Recorder)，并可作为JFR的可视化分析工具
    在正式探讨JMC之前，有必要先聊下JFR
      JFR (Java Flight Recorder)是一种用于收集有关运行中的Java应用的诊断信息和性能数据的工具，它几乎没有性能开销
      因此，即使在负载很大的生产环境中也可以使用。JFR主要用于以下场景:
      性能分析
        JFR可连续捕获应用的信息。比如执行概要分析(显 示程序花费时间的地方)， 线程停顿/等待时间概要分析
        (显示线程为什么不运行的原因)，分配概要分析(显示分配压力的位置)，垃圾回收详细信息等
      黑盒分析
        由于JFR开销非常低，因此可持续打开Flight Recorder, 让JFR将信息保存到缓存区，然后在稍后再去分析这块数据，定位特定异常的原因
      支持与调试
        联系Oracle支持人员寻求帮助时，JFR收集到的数据可能至关重要
    被监控的应用小于JDK11启动需增加参数才可以使用JFR
      一XX:+UnlockCommercialFeatures -XX:+FlightRecorder
    特点
      优点∶JMC的主要优点在于对JFR的支持
           JFR在生产环境中对吞吐量的影响较小一般不会高于1%
           JFR监控过程是可动态的，无需重启
           JFR监控过程对应用完全透明，无需修改应用的代码，也无需安装额外的插件或代理JFR提供的数据质量非常高，对监控、排查的参考价值更大
      缺点︰
           JFR并不完全向后兼容。比如，在JDK11里面生成的JFR文件，用早期的JMC(例如JMC 5.5)无法打开
           JMC 7.0.1无法分析堆dump文件(hprof格式)，但官方Wiki宣称支持分析堆dump文件

这些工具从可用性以及授权的不同，主要可以分为三类：
  正式支持工具：表示这类工具会有长期的技术支持，不同的平台、不同的JDK版本之间，这些工具可能会有一定差异，但总体来说还是比较兼容的。
  实验性工具：这类工具会被声明是实验性质，不会有技术支持，一些工具甚至可能会在某个新的JDK版本中突然就消失了。不过这些命令其实也都非常稳定，而且功能很强大，也是可以用在生产的。在实际项目中定位问题发挥的作用也非常的大，所以千万不要一看某个工具是实验性的就不学了。
  商业授权工具：指的主要是JMC以及JMC需要用到的JFR，这些工具在商业环境中使用的话是要付费的，但一般来说在个人开发环境中使用是免费的。
第三方工具
  Memory Analyzer Tool(MAT)：将内存分析做到了极致
    https://www.eclipse.org/mat/
    主要功能：找出内存泄漏的原因、找出重复引用的类和jar、分析集合的使用、分析类加载器
    Shallow vs Retained Heap(浅堆与保留堆)
      浅堆(Shallow Heap): 一个对象消耗的内存。一个对象引用需要32或64bit(取决于OS体系结构)，每个Integer4个字节，每个Long8个字节等。根据堆转储格式，这个大小也可能会被调整(例如，对齐为8bit),从而更好地模拟VM的实际消耗量。
      X的保留集(Retained set): 当X被垃圾回收时，由GC删除的对象集。同理，如果X没有被回收，那么该集合中的对象都会"保留下来"。
      X的保留堆(Retained heap)︰ X的保留集中的所有对象的浅层大小的总和，即X保持活动的内存。换而言之，Retained heap指的是对象X的保留内存大小，即由于它的存活导致多大的内存没有被回收。
      前导对象集的保留集(例如特定类的所有对象，或特定类加载器加载的所有类的所有对象，或者仅仅是一堆任意对象): 前导对象不可达时，被释放的那些对象。
    一般来说，对象的浅堆是对象在堆中的大小，而同一对象的保留大小是在垃圾回收对象时将释放的堆内存量。Retained set包括这些对象以及只能通过这些对象访问的所有其他对象。保留大小是保留集中包含的所有对象的总堆大小。
    X支配Y︰ 如果对象图中从起始（或Root)节点到Y的每条路径都必须经过X，那么就说对象X支配对象Y
    直接支配者: 某个对象路径最短的支配者
    Actions:常用的内存分析动作
      Histogram:列出内存中的对象，对象的个数及其大小(查看堆内存的直方图)。点击后生成的报表:
        Class Name: 类名称， java类名
        Objects: 类的对象的数量，这个对象被创建了多少个
        Shallow Heap: 一个对象内存的消耗大小，不包含对其他对象的引用
        Retained Heap: 是shallow Heap的总和，也就是该对象被GC之后所能回收到内存的总和
      Dominator Tree: 列出最大的那些对象，以及他们为什么存活(查看支配树)。
      Top Consumers: 打印最昂贵的对象，以内和包分组
      Duplicate Classes: 检测被多个classloader加载的类
    Reports: 报表
      Leak Suspects: 自动分析内存泄漏原因，并能直接定位到Class，找到可能导致内存泄漏的行数。
      Top Components: 列出内存占用超过1%的组件报告信息
    Step By Step
      Component Report: 一组工具的集合，用于分析指定包或ClassLoader下的对象的集合
  JITWatch: 可查看汇编代码
    JITWatch是JIT编译器的日志分析器与可视化工具。可用来检查内联决策、热点方法、字节码以及汇编的各种细节。它经常和HSDIS配合使用。
    GitHub: https://github.com/AdoptOpenJDK/jitwatch
    Wiki: https://github.com/AdoptOpenJDK/jitwatch/wiki/Troubleshooting

  Arthas
    文档地址：https://arthas.aliyun.com/doc/index.html
	使用profiler生成CPU火焰图：profiler start, profiler stop --format html
  JProfile-收费

博客：
https://blog.csdn.net/weixin_43477531/article/details/120145571

功能           JHSDB                                                   JCMD                            类似工具
展示Java进程    N/AI                                                    jcmd                            jps -lm
堆Dump         jhsdb jmap --binaryheap                                 jcmd pid GC.heap_dump           jmap -dump pid
堆使用直方图     jhsdb jmap --histo                                      jcmd pid Gc.class_histogram     jmap -histo pid
线程Dump       jhsdb jstack --locks (subset of locked thread frames)   jcmd pid Thread.print           jstack pid
展示系统属性     jhsdb jinfo --sysprops                                  jcmd pid VM.system_properties   jinfo -sysprops pid
列出JVM标记     jhsdb jinfo --flags                                     jcmd pid VM.flags               jinfo -flags pid

远程连接Java应用来进行监控-基于SSH
一、启动远程应用
  远程服务器执行:
java -Djava.rmi.server.hostname=192.168.3.26 \
-Dcom.sun.management.jmxremote.port=1235 \
-Dcom.sun.management.jmxremote.rmi.port=1250 \
-Dcom.sun.management.jmxremote.ssl=false \
-Dcom.sun.management.jmxremote.authenticate=false \
-jar xxx-jar
  注意，这里的hostname写localhost即可。当然，你还可以去开启认证、开启ssl。
  参数行内：-Djava.rmi.server.hostname=192.168.3.26 -Dcom.sun.management.jmxremote.port=1235 -Dcom.sun.management.jmxremote.rmi.port=1250 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false
二、SSH端口转发
  在使用远程监控工具的本机执行如下命令，SSH实现端口转发
ssh -v -D 9696 root@192.168.3.26
三、VisualVM代理配置
  工具->选项->网络->手动代理设置->SOCKS代理(127.0.0.1:9696)->没有代理主机清空
四、添加JMX连接
  连接(192.168.3.26:1235)

远程连接方式对比
方式     优点  缺点
jstatd  简单  除启动应用自身进程外，还需额外启动jstatd需要开放端口，端口随机问题导致重启jstatd又要重新开放端口对于VisualVM，无法使用Sample能能力
JMX     安全  配置繁多，特别是同时开启用户认证与SSL时需要开放端口
SSH     安全  需要在本机启动SSH进程









