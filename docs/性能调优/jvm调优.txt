JVM内存结构：
一、堆：线程共享，JVM中最大的一块内存，绝大多数对象在此创建
Eden, From survivor, To survivor | Tenured | Metaspace
伊甸园             存活区
         新生代                       老年代    元空间(本地内存大小取决于机器内存，不属于JVM虚拟机)
二、方法区：线程共享
存于堆中
  1、静态变量
  2、字符串常量池
    字符串常量池，也可以理解成运行时常量池分出来的一部分，类加载到内存的时候，字符串，会存到字符串常量池里面
存于元空间中(本地内存)
  3、运行时常量池
    当类加载到内存中后，JVM就会将静态常量池中的内容存放到运行时的常量池中﹔运行时常量池里面存储的主要是编译期间生成的字面量、符号引用等等
  4、类信息：类的版本、字段描述信息、方法描述信息、接口和父类等描述信息、class文件常量池(静态常量池)
    class文件常量池(静态常量池)包含：
      字面量:例如文本字符串、final修饰的常量
      符号引用:例如类和接口的全限定名、字段的名称和描述符、方法的名称和描述符
三、虚拟机栈：线程隔离，管理的是Java方法
创建线程时就会创建一个虚拟机栈，由栈帧组成，每一次的方法调用都会创建一个栈帧，然后再虚拟机栈上进行压栈，当方法返回进行出栈
栈帧包含内容：
  1、局部变量表：方法执行时从局部变量表或实例的字段中获取数据复制变量或常量放入操作数栈中
  2、操作数栈：计算时，往操作数栈中放入数据或取出数据进行计算，用来存放临时数据的地方
  3、指向运行时常量池的引用
  4、方法返回地址
  5、动态链接
四、本地方法栈：线程隔离，作用同虚拟机栈，管理的对象不同，本地方法栈管理的native方法
五、程序计数器：线程隔离，记录各个线程执行字节码的地址，如分支、跳转、循环、异常等等操作都需要依赖程序计数器。
  为何需要程序计数器：Java是多线程语言，当线程发生切换在次获得CPU时间片时需要知道线程执行到了哪一行，从何处继续执行。
