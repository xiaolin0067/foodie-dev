池化技术：对象池、线程池、连接池

对象池优缺点：池化一些大对象，创建慢的对象，提升性能；缺点：有学习成本，增加了代码复杂度

Commons-Poll2：apache开源的对象池框架
文档地址：
https://commons.apache.org/proper/commons-pool/
https://github.com/apache/commons-pool

用法：
ObjectPool：对象池
对象池核心类：GenericObjectPool, GenericKeyedObjectPool
Factory：创建&管理PooledObject，需要自己扩展
创建自己的Factory：1、实现接口 PooledObjectFactory<T>，2、继承 BasePooledObjectFactory<T>
将Factory包装成一个线程同步的类：PoolUtils.synchronizedPooledFactory(Factory)
PooledObject：包装业务对象，使之被对象池管理，一般使用DefaultPooledObject：包装原始对象实现监控与状态跟踪

Commons-Poll2实战，编写一个待监控的数据库连接池，学习收益：巩固对象池、扩展actuator
abandon：是对象池对象的一个状态，对象还在对象池中
evict：清理对象的过程abandoned，invalid对象，清理的不一定是abandoned对象

GenericObjectPoolConfig配置项
配置属性,描述,默认值
softMinEvictableldleTimeMillis,作用同minEvictableldleTimeMillis，如果minEvictableldleTimeMillis > 0，此配置会被minEvictableldleTimeMillis覆盖,-1
testOnBorrow,出借前有效性测试,false
testOnCreate,创建后有效性测试,false
testOnReturn,还回前有效性测试,false
testWhileldle,空闲有效性测试,false
timeBetweenRunsMillis,Evictor的定时器周期，当且仅当>0时，才会在创建Evictor定时器。详见BaseGenericObjectPool#setTimeBetweenEvictionRunsMillis,-1

AbandonedConfig配置项
配置属性,描述,默认值
logAbandoned,应用在废弃,false
logWriter,logAbandoned=true时候的日志打印器,System.out
removeAbandonedOnBorrow,借用对象时，是否要检查并移除掉废弃的对象,false
removeAbandonedOnMaintenance,当废弃的对象达到removeAbandonedTimeout时，是否移除,false
removeAbandonedTimeout,废弃的对象达到多久时移除,300秒
requireFullStackTrace,logAbandoned=true时，是否打印完整的栈信息,true
useUsageTracking,如果对象池实现了UsageTracking接口，那么在操作PooledObject时，是否记录栈跟踪信息并保留最新栈信息，以便于调试被废弃的对象,false

apache并发命令行工具，-c 并发线程数 -n 循环次数
ab -c 10 -n 100 http://192.168.3.14:8088/index/carousel

线程池
提供单线程执行，定时执行，可控制并发，功能强大。是一种特殊的对象池。
阻塞队列：当队列为空时，获取对象会阻塞;当队列满时，放入对象会阻塞，多线程环境下自动管理线程的等待与唤醒

    抛出异常      特殊值      阻塞      超时
插入 add(e)     offer(e)   put(e)    offer(e, time, unit)
移除 remove()   poll()     take()    poll(time, unit)
检查 element()  peek()       -         -

类名                    有界        特性
ArrayBlockingQueue	   有界	    1.内部基于数组实现，2.初始化时必须指定容量大小(因为没有无参构造器)3.一旦指定容量大小，就不能修改了
LinkedTransferQueue	    无	    1.底层基于链表，2.用于数据交换3.比其他队列多了transfer()及tryTransfer()方法
DelayQueue	            无	    1.其中的元素必须实现Delayed接口2其中的元素需要排序，一般情况下按照过期时间的优先级排序。3.使用场景∶定时关闭连接、缓存对象、超时处理场景
LinkedBlockingQueue	   有/无	    1.容量可选，默认无界(Integer.MAx_VALUE)，2.内部基于链表实现
PriorityBlockingQueue	无	    1.带优先级的阻塞队列，2.允许插入NULL对象3.元素必须实现Comparable接口，队列的排序规则需要用
SynchronousQueue	    有	    1.不存储元素，内部容量为0，2.一个线程发起插入操作后，就会被阻塞，直到另一个线程发起相应的删除操作才会恢复，因此又被称为同步队列3.主要实现了take()和put()操作，且需配对使用。

定时任务线程池：ScheduledThreadPoolExecutor
ForkJoinPool：JDK7开始提供，把一个大任务拆分成若干个小任务，最终再把每个小任务的结果汇总的框架
比较适合分而治之、递归计算的CPU密集场景，亮点：实现了工作窃取算法
new ArrayList<>().parallelStream()就是使用该线程池实现

线程池调优
CPU密集型：CoreSize + 1
IO密集型：2 * CoreSize
混合型：经验公式：N * U * (1 + WT/ST)
N：CPU核心数，U：目标CPU利用率，WT：线程等待时间，ST：线程运行时间
jvisualvm，选择项目-抽样器-CPU，自用时间即线程运行时间，总时间-自用时间=WT线程等待时间
Queue调优：计算单个任务占用内存与线程池计划占用内存

数据库连接池：
Hikari：spring主打连接池
Tomcat连接池
DBCP2：基于commons-pool2
Alibaba Druid
Redis连接池：
Jedis：基于commons-pool2
Lettuce：基于commons-pool2
Redissont
HTTP连接池
Apache HttpClient、OKHTTP自带连接池
RestTemplate、Feign底层可使用HttpClient/OKHTTP的连接池
连接池优化
1、连接数=2N＋可用磁盘数，N-CPU核心数
2、分离:2个连接池,一个连接池用于较快的查询，另一个用于报表等较慢的查询

同步∶程序按照定义的顺序执行，每一行都必须等待上一行完成后才能执行
异步:程序执行时，无需等待异步调用的语句返回，即可执行后面的操作
异步场景：耗时操作中，将不影响主流程的操作异步执行，降低响应时间

@Async注解注意点
@Async注解标注的方法必须返回void或Future
建议将@Async标注的方法放到独立的类中去，本类调用复杂
建议自定义BlockingQueue的大小：spring.task.execution.pool.queue-capacity

远程调用异步化：
1、AsyncRestTemplate
2、WebClient，基于Reactor、WebFlux，spring 5.0提供，是AsyncRestTemplate的替代
https://www.baeldung.com/spring-5-webclient
3、生产消费模型

feign目前不支持异步调用

线程安全问题
产生条件：1、存在共享数据，2、多个线程同时操作共享数据

synchronized
总体原则：尽量避免操作系统内核态与用户态的切换开销，使用对象头中的Mark Word的数据状态来实现偏向锁与轻量级锁
是可重入锁：持有外层的锁也会同时持有里层的锁
修饰实例方法∶给当前实例加锁，进入同步代码前要获得当前实例的锁
修饰静态方法∶给当前类加锁，进入同步代码前要获得指定类对象的锁
修饰代码块: 给指定对象加锁，进入同步代码前要获得指定对象的锁
synchronized原理：
对象存储结构
1、对象头：实现synchronized的基础。
   Mark Word：存储对象的运行时数据，如hash code, gc年龄, 锁状态标志, 线程持有的锁等
       偏向锁：默认启动5秒后开启，立即开启参数：-XX:+UseBiasedLocking --XX:BiasedLockingStartupDelay=0
   类型指针
   数组长度：对象为数组才有
2、实例数据
3、对齐填充：JVM要求对象大小必须是8byte的整数倍

锁分级
锁	优点	缺点	适用场景
偏向锁	加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距	如果线程间存在锁竞争，会带来额外的锁撤销的消耗	适用于只有一个线程访问同步块场景
轻量级锁	竞争的线程不会阻塞，提高了程序的响应速度	如果始终得不到锁竞争的线程使用自旋会消耗CPU	追求响应时间,锁占用时间很短，用于多个线程交替进入同步代码场景
重量级锁  线程竞争不使用自旋，不会消耗CPU	线程阻塞，响应时间缓慢	追求吞吐量,锁占用时间较长，用于多个线程同时竞争同步代码的场景

synchronized优化机制
锁消除：通过逃逸分析出代码若不存在线程安全问题则不进行加锁，逃逸分析：分析变量能否逃出它的作用域
锁粗化：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁

ReentrantLock：实现了-互斥性，可重入性，公平性
公平锁：线程会按照获取锁的先后顺序拿到锁，而非公平锁允许插队-效率也较高
公平锁∶如果另一个线程持有锁或者有其他线程在等待队列中等待这个锁，那么新发出的请求的线程将被放入到队列中
非公平锁，当锁被某个线程持有时，新发出请求的线程才会被放入队列。如果在发出请求的时候，锁变成可用状态，这个线程会跳过队列中的等待线程获得锁。
线程协作推荐使用：Condition

ReentrantLock原理：AQS+CAS
AQS：AbstractQueuedSynchronizer，内部维护了一个Node类型的双向链表，node本质是对线程的封装
用于构建锁和同步容器的框架，简化同步细节
加锁实现：检查state属性是否为0或请求线程为持锁线程的话state加1
CAS：compareAndSet

synchronized和ReentrantLock区别
相同点：都实现了互斥、可重入
区别：
1、实现机制
synchronized : JVM实现
ReentrantLock : JDK实现
2、性能
<JDK 1.6 : synchronized比ReentrantLock差很多
>= JDK 1.6∶性能差不多
3、使用
synchronized :方便简洁，由JVM保证加锁解锁
ReentrantLock :丢动加解锁
4、功能
ReentrantLock可指定公平锁、非公平锁
ReentrantLock有丰富的API
ReentrantLock提供了Condition
优先使用synchronized

ReentrantReadWriteLock :读锁共享，写锁互斥，等大幅提升读多写少场景性能
StampedLock：JDK 8引入，ReentrantReadWriteLock的增强版

锁调优：
减少锁的持有时间，锁住逻辑要尽可能快速执行
减少锁的粒度：将大的锁对象拆分成多个小对象
锁粗化：将多个锁住代码块合并为一个
无锁(CAS)
锁分离
  读写分离：使用ReentrantReadWriteLock和StampedLock来优化synchronized和ReentrantLock
  操作分离：LinkedBlockingQueue，入队出队锁独立






