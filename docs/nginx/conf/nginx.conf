# worker进程运行用户
user  root;
# worker进程, cpu核心数-1
worker_processes  2;

# 日志级别：debug info notice warn error crit
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    # 默认也使用epoll，可不配置
    use epoll;
    # 每个worker最大客户端连接数
    worker_connections  10240;
}


http {
    # 导入文件
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # 文件高效传输
    sendfile        on;
    # sendfile开启后才有效，数据包达到一定量后才发送以提高效率
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #一个http请求之后客户端与服务器保持连接不断开以供下次请求的连接保持时间
    keepalive_timeout  65;

    #传输内容是否压缩，提高传输效率，节约带宽
    gzip  on;
    #限制最小压缩大小，小于1字节文件不会压缩
    gzip_min_length 1;
    # 压缩级别（1~9），级别越高压缩率越大CPU使用越大
    gzip_comp_level 3;
    # 需要压缩的文件类型
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json;

    include myNginx.conf;

    upstream tomcats {
# 负载均衡-ip_hash算法（分表可与此类似）：
# hash(ip) % node_counts = index
# hash(ip)算法取的是ip的前三部分进行hash，见源码：nginx-1.16.1/src/http/modules/ngx_http_upstream_ip_hash_module.c
# 若使用了ip_hash，并且其中某一台服务器出现了问题需要移除时：
#    处理操作为将这台服务器标记为down，不可直接删除这台服务器，否则所有请求的hash结果将会重新计算。
#        ip_hash;
# 一致性hash算法: hash范围0-2^32 - 1,将服务器的IP/主机名经过hash算法放入环形作为一个节点,请求IP进行hash访问顺时针的下一个节点
#    节点增加和减少只会影响少部分的请求
# 负载均衡-url hash: hash(uri) % node_counts = index
#        hash $request_uri;
# 负载均衡-least_conn:最少的连接数，哪台服务器的连接数最少就请求哪一台服务器
#        least_conn;
        server 192.168.3.16:8080 max_conns=2;
# 负载均衡-轮询,权重。weight(权重)默认为1
# max_conns:最大连接数
# slow_start:将配置的weight从0在配置的时间内提升至指定的weight。(不可用于hash，random的负载均衡方式；对于单台服务器，此参数会被忽略，商业版nginx可用)
# down:标识服务器状态为不可用状态
# backup:备用机，当其他服务器不可用时备用机才会被使用
# max_fails,fail_timeout:需要配合使用，最大失败次数，失败达到最大次数后，等待此重试超时时间后重新尝试请求。
#        server 192.168.3.17:8080 weitht=1 max_conns=2 slow_start=60s down;
#        server 192.168.3.18:8080 weight=2;
#        keepalive:保持为长连接的数量，可提高吞吐量
#        keepalive 32;
    }
# 定义我的缓存
# proxy_cache_path 设置缓存保存的目录
# keys_zone 设置共享内存(缓存)名以及初始化占用空间大小
# max_size 设置缓存最大占用空间
# inactive 缓存失效时间，此时间过后缓存目录(proxy_cache_path)中的缓存文件将被删除
# use_temp_path 关闭临时目录
    proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;

    server {
        listen       80;
        server_name  www.tomcats.com;

        # 开启并使用缓存
        proxy_cache mycache;
        # 针对200和203状态码的缓存设置过期时间
        proxy_cache_valid 200 203 8h;

        location / {
            proxy_pass http://tomcats;
# keepalive配置：
#            proxy_http_version 1.1;
#            proxy_set_header Connection "";
        }
        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    # 开启ssl
    #ssl on;
    # 配置ssl证书
    #ssl_certificate 1_www.imoocdsp.com_bundle.crt;
    # 配置证书秘钥
    #ssl_certificate_key 2_www.imoocdsp.com.key;
    # ssl会话cache
    #ssl_session_cache shared:SSL:1m;
    # ssl会话超时时间
    #ssl_session_timeout 5m;
    # 配置加密套件，写法遵循 openssl 标准
    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    #ssl_prefer_server_ciphers on;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
