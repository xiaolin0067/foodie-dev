# 什么是MyCat
一个开源的分布式数据库系统，前端的用户可以把它看成一个数据库代理，用MySql客户端和命令行工具都可以访问，而其后端则是用MySql原生的协议与多个MySql服务之间进行通信。
MyCat的核心功能是分库分表，即将一个大表水平切分成N个小表，然后存放在后端的MySql数据当中。
MyCat是一个数据库的中间件，介于应用与数据库之间，是进行数据处理和交互的中间服务。

# MyCat的应用场景
1、单纯的读写分离，此时配置最为简单，支持读写分离，主从切换；
2、分库分表，对于超过1000w的表进行分片，最大支持1000亿的数据；
3、多租户应用，每个应用一个数据库，应用只连接MyCat，程序本身不需要改造；
4、代替HBase，分析大数据

# 基本概念
## 逻辑库（Schema）：例如垂直切分中的三个库，用户库，订单库，商品库，而这3个库就被称为逻辑库。
MyCat可以被看做是一个或者多个数据库集群构成的逻辑库。

# 逻辑表（table）
对于应用系统来说，读写数据的表，就是逻辑表。逻辑表中的数据，则是被水平切分后，分布在不同的分片库中。
分片表与非分片表：
数据水平切分的表，我们把它叫做分片表。而数据量比较小，没有进行分片的表，我们叫它非分片表。
全局表：
订单状态表冗余到所有的订单分片库中，我们把这种通过数据冗余方式复制到所有的分片库中的表，叫做全局表。
# 分片节点（dataNode）
数据被切分后，一张大表被分到不同的分片数据库上面，每个分片表所在的数据库就叫做分片节点。
# 节点主机（dataHost）
数据切分后，每一个分片节点不一定都会占用一个真正的物理主机，会存在多个分片节点在同一个物理主机上的情况，这些分片节点所在的主机就叫做节点主机。
为了避免单节点并发数的限制，尽量将读写压力高的分片节点放在不同的节点主机上。
# 分片规则（rule）
按照某种业务逻辑，将数据分到一个确定的分片当中，这个规则就叫做分片规则。
数据切分选择合适的分片规则非常重要，这将影响到后的数据处理难度，结合业务，选择合适的分片规则，是对架构师的一个重大考验。
对于架构师来说，选择分片规则是一个艰难的，难以抉择的过程。
# 全局序列号（sequence）
分片后自增ID失效，我们需要借助外部的机制保证数据的唯一标识，这种保证数据唯一标识的机制，我们叫做全局序列号。


http://www.mycat.org.cn/
# 安装
tar -zxf Mycat-server-1.6.7.6-release-20210730131311-linux.tar.gz -C /usr/local/
cd /usr/local/mycat/conf/
vim server.xml
修改连接数据库
<property name="schemas">user</property>
vim schema.xml
配置dataHost
<dataHost name="db26" maxCon="1000" minCon="10" balance="0"
                  writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
        <heartbeat>select user()</heartbeat>
        <writeHost host="host26" url="192.168.3.26:3306" user="root"
                           password="123456" />
</dataHost>
<dataHost name="db27" maxCon="1000" minCon="10" balance="0"
                  writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
        <heartbeat>select user()</heartbeat>
        <writeHost host="host27" url="192.168.3.27:3306" user="root"
                           password="123456" />
</dataHost>
配置dataNode
<dataNode name="dn26" dataHost="db26" database="user_26" />
<dataNode name="dn27" dataHost="db27" database="user_27" />
配置schema
<schema name="user" checkSQLschema="true" sqlMaxLimit="100">
        <table name="user" dataNode="dn26,dn27" rule="auto-sharding-long" />
</schema>
两个数据库分别创建数据库user_26、user_27，分别创建user表
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;
编辑规则autopartition-long
vim autopartition-long.txt
# 1000M-1500M=2
启动mycat
./bin/mycat console
默认连接端口8066

# Mycat配置
首先配置server.xml
配置mycat的用户名、密码、权限、schema
配置后客户端可直接连接这里配置的连接信息进行连接
mysql8的客户端(mysql)默认使用新的加密方式，若需要连接老的加密方式的mycat，需要添加参数 --default-auth=mysql_native_password
mycat默认使用老的加密方式连接mysql，所以使用mysql8时需要添加一个新用户指定密码为老的加密方式

schema.xml配置
1、配置dataHost(节点主机)，包括读host、写host
2、配置dataNode(数据节点)，指定到具体的数据库
3、配置schema(逻辑库)，表名、数据节点、分片规则等

节点主机 dataHost
# dataHost属性balance 针对读请求
0-不开启读写分离(所有读请求落到writeHost上)
1-多个主从的情况下，M1-S1,M2-S2 M1与M2护卫主从，则读操作将会落到S1、M1、S2上，不会落到M1上
2-读写均匀分配(查看均匀分配到所有读库写库上)
3-读请求落到readHost上
# dataHost属性writeType 针对写请求
0-所有写请求落到第一个writeHost上，若第一个writeHost挂了才会落到第二个writeHost上(非抢占式，即使writeHost1重新启动仍会插入writeHost2)（建议使用，写库只保留一个，保证数据不错乱）
1-随机(1.5版本后废弃)

分片节点 dataNode：配置节点主机与数据库名
逻辑库 schema
schema属性：name-库名，sqlMaxLimit-检索时加上limit语句(只对分片表有效，若查询中带了limit则不会生效)，checkSQLschema-是否去掉SQL中的schema
schema.table：配置逻辑表的表名、数据节点、分片规则(必须与rule.xml中的tableRule对应)

# MyCat manager 默认9066端口
查看帮助
show @@help;
查看分片节点
show @@datanode;
重写加载配置文件
reload @@config;
修改了数据源相关配置刷新配置文件
reload @@config_all;

# 水平分片模式-枚举分片模式
编辑逻辑库配置文件
vim schema.xml
在writeHost里面配置readHsot，以使用读写分离
修改rule为分片枚举
<table rule="sharding-by-intfile" />
编辑分片规则配置文件
vim rule.xml
修改tableRule的columns字段名
<tableRule name="sharding-by-intfile">
  <rule>
    <columns>province_id</columns>
    <algorithm>hash-int</algorithm>
  </rule>
</tableRule>
修改规则配置
<function name="hash-int"
  class="io.mycat.route.function.PartitionByFileMap">
  <property name="mapFile">partition-hash-int.txt</property>
  <property name="defaultNode">0</property>
</function>
修改partition-hash-int.txt
vim partition-hash-int.txt
内容如下：
10000=0
10010=1
DEFAULT_NODE=0
刷新配置

# 水平分片模式-取模
编辑逻辑库配置文件
vim schema.xml
修改rule为取模
<table rule="mod-long" />
编辑分片规则配置文件
vim rule.xml
修改分片列名
<tableRule name="mod-long">
  <rule>
    <columns>user_id</columns>
    <algorithm>mod-long</algorithm>
  </rule>
</tableRule>
修改节点数
<function name="mod-long" class="io.mycat.route.function.PartitionByMod">
  <property name="count">2</property>
</function>
刷新配置

# 全局表不进行分片，每个数据库都有全量数据，type="global"
<table name="province" dataNode="dn26,dn27" type="global" />

# Mycat子表：如订单表与订单商品表记录应该在一起，不需要跨库查询
<table name="t_order" dataNode="dn26,dn27" rule="auto-sharding-long">
    <childTable name="order_item" joinKey="order_id" parentKey="id" />
</table>

# Mycat的Haproxy
安装
yum install -y haproxy
编辑配置文件
vim /etc/haproxy/haproxy.cfg
修改协议
defaults
    mode                    tcp
    option                  tcplog
    #option http-server-close
    #option forwardfor       except 127.0.0.0/8
frontend  main *:5000
    #acl url_static       path_beg       -i /static /images /javascript /stylesheets
    #acl url_static       path_end       -i .jpg .gif .png .css .js
    #use_backend static          if url_static
修改节点
backend app
    balance     roundrobin
    server  app1 192.168.3.17:8066 check
    server  app2 192.168.3.26:8066 check
保存退出，启动：
haproxy -f /etc/haproxy/haproxy.cfg
















