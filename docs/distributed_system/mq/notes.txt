分布式消息队列(MQ)应用场景：服务解耦、削峰填谷、异步化缓冲（最终一致性，柔性失误）
分布式消息队列应用思考：
生产端可靠性投递(不可丢失，原子性)、消费端幂等(一条消息只能消费一次)
高可用、低延迟、可靠性、消息堆积能力、可扩展性
技术选型注意点：根据业务场景考虑各个MQ的优缺点和性能、集群架构模式(分布式、可扩展、高可用、可维护性)、综合成本问题(集群规模、人员成本)、未来的方向线规划与思考
ActiveMQ：适合传统型公司业务以及互联网边缘行业，消息并发与沉载能力较弱，不适用于较大并发的场景，只用zookeeper做主备切换
RabbitMQ：横向扩展能力不是很好需要添加路由组件，可用性可维护性较好
kafka：消息可靠性依赖不高首选，可在很廉价的机器上有非常高的性能与吞吐量的表现

RabbitMQ集群架构模型：
主备模式：热备份，master对外提供读写，slave仅进行备份。master挂掉之后slave成为master。
远程模式：早提提供的多活存储，主要做数据异地容灾，也可提升性能(当前集群处理不过来时会将请求会发到下游集群)，架构简单配置复杂(一般用多活模式替代该模式)
镜像模式：业界使用最为广泛的模式，保证消息非常可靠
多活模式：做一个异地存容灾，数据转储

主备模式(warren 兔子窝)
使用HaProxy路由到master，master挂掉之后路由到slave
远程模式使用shovel插件将两个集群互联
镜像模式(Mirror)：一般互联网大厂都使用该模式，也使用HaProxy搭建
多活模式：Federation插件

kafka：分布式、跨平台(支持不同语言)、实时性、伸缩性
高性能的原因：
顺序写、Page Cache(OS级别，顺序读文件，不显示的用内存)、空中接力
高效读写、高性能高吞吐
后台异步、主动flush
预读策略、IO调度
Page Cache(页面缓存)：操作系统实现的主要的磁盘缓存，减少对磁盘的IO操作，将磁盘中的数据缓存到内存中，将对磁盘的访问变成对内存的访问
zero拷贝：原始程序从读取文件内容发送到其他进程需要四次拷贝，zero拷贝只进行一次拷贝
将磁盘文件复制到页面缓存(内核读取缓冲区)一次，然后直接发送到网卡接口
集群模型：
当数据量不会很大时，大部分时间都是内存的存储，磁盘仅做异步备份，可以部署集群内存级别的副本，达到高可用。也可配置成高可用，但性能会降低。

AMQP定义：是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。
Server：又称Broker，接受客户端的连接，实现AMQP实体服务
Connection：连接，应用程序与Broker的网络连接
Channel：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务。
Message：消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级；Body则就是消息体内容。
Virtual host：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue，同一个Virtual host不能有相同名称的Exchange或Queue。
Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列。
Binding：Exchange和Queue之间的虚拟连接， binding中可以包含routing key。
Routing key： 一个路由规则，虚拟机可用它来确定如何路由一个特定消息。

RabbitMQ
是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP议的。
优点：
采用Erlang语言作为底层实现：Erlang有着和原生Socket一样的延迟
开源、性能优秀，稳定性保障
提供可靠性消息投递模式（confirm）、返回模式（ return ）
与SpringAMQP完美的整合、API丰富
集群模式丰富，表达式配置，HA模式，镜像队列模型
保证数据不丢失的前提做到高可靠性、可用性
高性能原因：Erlang有着和原生Socket一样的延迟

安装RabbitMQ
1. 首先在Linux上进行一些软件的准备工作，yum下来一些基础的软件包
yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel
2. 下载RabbitMQ所需软件包（本神在这里使用的是 RabbitMQ3.6.5 稳定版本）
wget www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm
wget http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm
wget www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm
3. 安装服务命令
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm
4. 修改用户登录与连接心跳检测，注意修改
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
修改点1：loopback_users 中的 <<"guest">>,只保留guest （用于用户登录）
修改点2：heartbeat 为10（用于心跳连接）
5. 安装管理插件
5.1 首先启动服务(后面 | 包含了停止、查看状态以及重启的命令)
rabbitmq-server start | stop | status | restart
5.2 查看服务有没有启动： lsof -i:5672 （5672是Rabbit的默认端口）
rabbitmq-plugins enable rabbitmq_management
5.3 可查看管理端口有没有启动：
lsof -i:15672 或者 netstat -tnlp | grep 15672
6. 一切OK 我们访问地址，输入用户名密码均为 guest ：
http://你的ip地址:15672/
7. 如果一切顺利，那么到此为止，我们的环境已经安装完啦

生产端可靠性投递：
1.生产者保证消息成功发出
2.MQ节点成功接收消息
3.生产者收到MQ节点确认应答
4.消息的可靠性投递补偿机制：
1)消息落库，对消息状态进行打标。
2)消息延迟投递，做二次确认，回调检查。
注意：①一般在互联网项目中一般落库不使用任何事务。②对于业务消息，一定是先落库在发送至消息队列。

幂等性：操作一件事情，操作一次和操作n次的结果是一样的（例如执行一条sql，无论执行一次还是同时并行n次结果一致）
update t_reps set count = count - 1, version = version + 1 where version = 1;
通过如上version的方式来保障乐观锁、幂等性
MQ中的消息重复投递、网络闪断、产生broker重发，等异常情况导致同一条消息会收到多次，但是我们对于相同的消息只会处理一次，这就保证了幂等性
业界主流保证幂等性的操作：
1、唯一ID+指纹码机制，利用数据库主键去重
指纹码(不一定由系统生成，可能为银行系统返回、时间戳等)，保证绝对唯一
insert前查询数据库中是否存在该id，若存在不进行操作，已经有其他的操作将该消息消费执行完成了
好处：实现简单，坏处：会对数据库进行读写操作，高并发情况下有写入瓶颈(解决方案：分库分表，对ID进行路由到不同数据库)
2、利用Redis原子性去重，存在的问题：
①对数据进行落库如果做到缓存与数据库的原子性
②若不立刻落库，如果进行定时同步到数据库中












