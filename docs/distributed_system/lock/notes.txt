# 乐观锁
1.在检索数据，将数据的版本号或者最后更新时间一并查询出来
2.操作员更改数据以后，点击保存，在数据库执行update 操作
3.在执行update 操作时，用步骤1 查询出的版本号或者最后更新时间与数据库中的记录进行比较
4.如果版本号或最后更新时间一致，则可以更新
5.如果不一致，就要给出上面的提示
在JAVA中乐观锁并没有确定的方法 ，或者关键字，它只是一个处理的流程、策略。
乐观锁在读取数据的时候不会做任何限制，而是在更新数据的时候，进行数据的比较，保证数据的版本一致时再更新数据。
根据它的这个特点，可以看出乐观锁适用于读操作多，而写操作少的场景。

# 悲观锁
悲观锁从读取数据的时候就显示的加锁，直到数据更新完成，释放锁为止，在这期间只能有一个线程去操作，其他的线程只能等待。
在JAVA中，悲观锁可以使用 synchronized 关键字或者 ReentrantLock 类来实现。
悲观锁从读取数据的时候就加了锁，而且在更新数据的时候， 保证只有一个线程在执行更新操作，并没有像乐观锁那样进行数据版本的比较。
悲观锁适用于读相对少，写相对多的操作。

# 公平锁与非公平锁
公平锁与非公平锁都在 ReentrantLock 类里给出了实现。
在公平锁当中，未得到锁的所有的线程都自觉排队，一个线程执行完之后，排在后面的线程继续使用。
公平锁是将所有的线程放在一个队列中，一个线程执行完成后，从队列中取出下一个线程。
非公平锁则没有排队机制，线程释放锁后其他线程还是通过竞争的方式获得锁。

# 总结
JAVA 中锁的种类非常多，找了非常典型的几个锁的类型介绍了下，乐观锁与悲观锁是最基础的，也是大家必须要掌握的。
大家在工作中不可避免的都要使用到乐观锁和悲观锁。从公平锁与非公平锁这个角度上看，大家平时使用的都是非公平锁，这也是默认的锁类型。
如果要使用公平锁，大家可以在秒杀的场景下使用，在秒杀的场景下，是遵循先到先得的原则，是需要排队的，所以这种场景下是最适合使用公平锁的。

超卖解决：
在数据库update语句计算库存，通过update行锁（执行update语句时锁定该行）解决并发

















