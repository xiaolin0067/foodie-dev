Redis
    Nosql, 分布式缓存中间件, Key-value存储
    提供海量数据存储访问
    数据存储在内存，读取更快
    非关系型、分布式、开源、水平扩展
    持久化
    主从同步, 故障转移
    缺点：单线程、单核
与Memcache相比：Memcache不能够持久化容灾

Redis安装
https://redis.io
解压安装包，进入解压后的目录，安装gcc-c++
yum install -y gcc-c++
yum install -y tcl
编译与安装
make && make install
拷贝配置文件
mkdir -p /usr/local/redis
cp redis.conf /usr/local/redis
复制Redis启动文件到/etc/init.d/
cp utils/redis_init_script /etc/init.d/
配置Redis
cd /usr/local/redis
创建工作目录
mkdir working
    编辑配置
    vim redis.conf
    在后台运行
    daemonize yes
    工作目录
    dir /usr/local/redis/working
    允许访问的IP
    bind 0.0.0.0
    访问端口
    port 6379
    访问密码
    requirepass 123456
    进程号文件
    pidfile /var/run/redis_6379.pid

编辑Redis启动脚本
    cd /etc/init.d
    vim redis_init_script
    修改配置文件
    CONF="/usr/local/redis/redis.conf"
    $CLIEXEC -a 123456 -p $REDISPORT shutdown
    修改脚本权限
    chmod +x redis_init_script
    启动Redis
    ./redis_init_script start
    开机自启动
    chkconfig redis_init_script on

停止Redis
1.直接kill Redis pid
2.修改redis_init_script脚本，增加密码
$CLIEXEC -a 123456 -p $REDISPORT shutdown
保存退出后执行
./redis_init_script stop

redisl-cli使用
登录
    redis-cli 或者 redis-cli -p 6379 -h 127.0.0.1
鉴权
    auth 123456
基础使用
    set age 18
    get age
    del age
命令补全，输入命令得一部分然后按TAB键
直接在命令行使用命令
    redis-cli -a 123456 get name
    redis-cli -a 123456 ping

Redis的数据类型：string、hash、list、set、zset
string类型
查看所有的key，生产环境禁用，因生产环境key太多
匹配所有
    keys *
匹配以age开头
    keys age*
查看key的value类型
    type age
set会覆盖value，SETNX则不会覆盖，若key存在则不设置
    setnx age 20
查看缓存过期时间，time to leave，-1为永不过期，-2为已过期
    ttl age
给已添加的缓存设置过期时间，单位秒
    expire age 30
设置缓存时给缓存设置过期时间，ex为s, px为ms
    set name test px 3000
清除屏幕
    clear
value拼接字符串
    append email 123
查看字符串长度
    STRLEN email
对于数字类型value累加操作，步长为1
    incr age
对于数字类型value累减操作，步长为1
    decr age
对于数字类型value累加操作，自定义步长
    INCRBY age 10
对于数字类型value累减操作，自定义步长
    DECRBY age 10
获取value字符串指定范围内的内容, -1为最后位置
    getrange age 0 -1
在指定index开始覆盖字符串
    SETRANGE email 1 abc
一次设置多个键值对
    MSET k1 v1 k2 v2
一次获取多个键值对
    MGET k1 k2
一次设置多个键值对，若设置的key中存在已存在的key，则整个操作都会撤销
    MSETNX k2 v2 k3 v3
redis默认有16个数据库，在redis.conf配置文件中配置databases 16
使用命令select ${dbIndex}来切换库，可在不同的项目中使用不同的库
清除当前库的所有数据
    flushdb
清除所有库的所有数据
    flushall

hash类型
类似与将一个map存入value中，可以将结构化数据存入redis
    hset user name testName
    hget user name
同时设置多个值
    hmset user age 18 sex man
同时获取多个值
    hmget user name age sex
获取对象所有键值对
    hgetall user
获取对象属性字段数量
    hlen user
打印对象所有的key
    hkeys user
打印对象所有的value
    hvals user
对象数字属性值增加，指定增加值
    HINCRBY user age 2
对象数字属性值增加，指定增加值为浮点数
    HINCRBYFLOAT user age 3.2
对象属性是否存在
    HEXISTS user age
删除对象属性
    HDEL user name

list类型，列表、数组
从左边添加元素
    LPUSH list1 a b c d e
查看所有元素
    LRANGE list1 0 -1
从右边添加元素
    RPUSH test2 a b c d e
从左边取出元素
    LPOP list1
从右边取出元素
    RPOP test2
查看数组长度
    llen list1
查看index位置的元素，index不存在时会提示不存在
    LINDEX list1 2
给index元素设值，index不存在时会提示不存在
    lset list1 1 888
在指定元素之前插入值，若存在多个指定元素，则只会在index最小的前插入
    LINSERT list1 before b aaa
删除指定元素，指定删除个数
    lrem list1 99999 666
截取列表，列表只保留截取index的元素，其余元素会被删除
    LTRIM list1 4 6
删除列表
    del list1

set类型
只会保留不相同的元素
添加元素
    sadd set1 a b c a a b d
查看所有元素
    smembers set1
查看元素数量
    scard set1
指定元素是否在指定set中
    SISMEMBER set1 a
删除指定set中指定元素
    srem set1 a
从set中随机取出指定数量的元素
    spop set1 2
从set中随机查看指定数量的元素，不指定数量默认为1个
    SRANDMEMBER set2 3
将指定set中的指定元素移动到另一个指定set中
    SMOVE set3 set2 d
set可以做交集、并集、差集运算
差集运算，打印在set1中在set2中不存在的元素，set1-set2
    SDIFF set1 set2
交集运算，打印在set1与set2中都存在的元素
    SINTER set1 set2
并集运算
    SUNION set1 set2

zset类型
有序的set，也叫sorted set，可排序的set，且带有分数scope
添加元素
    zadd zset1 10 a 20 b 30 c
查看所有元素
    ZRANGE zset1 0 -1
查看所有元素与元素分数
    ZRANGE zset1 0 -1 withscores
查看指定元素所在index
    ZRANK zset1 c
查看指定元素分数
    ZSCORE zset1 c
查看元素个数
    ZCARD zset
统计指定分数范围内的元素个数
    ZCOUNT zset1 11 31
查看指定分数范围内的元素
    ZRANGEBYSCORE zset1 10 30
查看指定分数范围内的元素，limit指定输出数据
    ZRANGEBYSCORE zset1 10 30 limit 1 2
查看指定分数范围内的元素，不包含最大最小值
    ZRANGEBYSCORE zset1 (10 (30
删除指定元素
    zrem zset1 a
Redis命令网址：http://redisdoc.com/
redis-cli查看中文value，登录时指定参数--raw，即：redis-cli --raw

Redis的发布与订阅
1、订阅channel(通道/频道)
SUBSCRIBE channel_1 channel_2 channel_3
2、发布者向channel发布消息
PUBLISH channel_1 channel_1-message1
指定通配符批量订阅
PSUBSCRIBE channel_*

redis持久化机制
RDB：redis database；适合大量数据的恢复，最后一次的数据可能会丢失。冷备份。
每隔一段时间进行全量备份，配置位于redis.conf中
dir为备份文件路径，dbfilename为文件名
save <seconds> <changes> 保存规则及时间，<changes>个key发生改变后，将会在<seconds>秒后保存
AOF: append only mode，热备份。
以日志的形式存在，将每次写操作追加记录到AOF日志文件中。可能导致AOF文件过大，可以通过重写机制调整。
可使用redis-check-aof处理AOF文件
开启AOF：appendonly改为yes
appendfsync同步策略：每次写操作、每秒、关闭
注意：若使用AOF进行恢复数据时，若在redis中最后一个命令是flushdb/flushall，那么在恢复时仍会执行该命令。
在恢复数据时将AOF文件中该条命令删除后即可。
重启redis会自动执行AOF文件恢复数据，先加载AOF，若产生问题可移走AOF文件使用RDB恢复。

Redis主从架构（主从复制/读写分离）
主Master-用于写，从Slave-用于读
单机Redis并发大约5~6w，优化后可达十几万
必须要开启master的持久化机制，否则master挂掉重启之后会同时将其他slave节点的数据清空
一般使用一主二从，若从节点过多会导致主从之间频繁同步数据占用带宽与资源。从节点也可使用一主二从，树状部署。
一主二从搭建服务器部署信息：192.168.3.26(master),192.168.3.17(slave),192.168.3.27(slave)
查看主从复制信息
info replication
在从节点修改redis.conf配置
# master地址
replicaof 192.168.3.26 6379
# master密码
masterauth 123456
# 从节点默认只读，replica-read-only yes
注意：该部署方式存在如下问题，若主节点挂掉只有子节点存在时，那么将不可写入数据只可以读取。

Redis无磁盘化复制 diskless
Redis主从同步数据的同步策略有：磁盘、网络
repl-diskless-sync yes

Redis缓存过期机制（针对设置过expire过期时间的key，当key过期后，虽然无法读取但仍存储在内存不会立马清除）
主动删除-定期删除：10次/s（可配置），定时随机抽查key，若过期则删除
每秒随机抽查10个key
hz 10
被动删除-惰性删除：client请求key时，若key已过期，将其删除

Redis内存淘汰管理机制，当机器内存达到阈值后执行清理内存的机制
MEMORY MANAGEMENT
开启最大内存限制
maxmemory <bytes>
管理策略
maxmemory-policy noeviction
noeviction：达到最大内存时，不清理内存，若还有新增的key直接报错
allkeys-lfu：达到最大内存时，清理最少用到的老的缓存。（最常用到）

Redis哨兵模式
Sentinel(哨兵)是用于监控Redis集群中Master状态的工具，是Redis高可用解决方案，哨兵可以监视一个或者多个redis master服务，以及这些master服务的所有slave服务
某个master服务宕机后，会把这个master下的某个从服务升级为master来替代已宕机的master继续工作。
在所有节点上执行如下操作
    在/usr/local/redis下创建配置文件sentinel.conf
    创建日志与工作目录/usr/local/redis/sentinel
    启动：redis-sentinel sentinel.conf
# 查看imooc-master下的master节点信息
sentinel master imooc-master
# 查看imooc-master下的slaves节点信息
sentinel slaves imooc-master
# 查看imooc-master下的哨兵节点信息
sentinel sentinels imooc-master

Redis-cluster集群（多主多从）
在Redis的主从架构和哨兵模式下，master还是只有一个，增加了slave，提高了读的并发，但是单个master仍会存在瓶颈。master在向slave同步数据时可能master会挂掉，则此数据会丢失。
redis集群的部署方式为：多主多从；经典部署方式：三主三从
一、部署redis集群
在每个节点修改redis.conf配置
1、开启AOF
appendonly yes
2、开启cluster
cluster-enabled yes
cluster-config-file nodes-6379.conf
cluster-node-timeout 5000
停止redis服务
/etc/init.d/redis_init_script stop
删除rdb文件后启动redis服务
/etc/init.d/redis_init_script start
二、配置redis集群
早期的版本使用ruby脚本进行配置，脚本位于redis安装包解压目录下src/redis-trib.rb
这里使用redis-cli配置集群
帮助文档
redis-cli --cluster help
创建集群，--cluster-replicas为master：slave的比例，集群至少需要3台主节点，配置为0代表没有从节点，配置为1代表三主三从
机器跑不动太多虚拟机，此处直接使用4主无从测试
redis-cli -a 123456 --cluster create 192.168.3.16:6379 192.168.3.17:6379 192.168.3.26:6379 192.168.3.27:6379 --cluster-replicas 0
查看节点状态，使用任意节点的返回信息都是一致的
redis-cli -a 123456 --cluster check 192.168.3.16:6379
登录集群，注意：必须携带参数 -c -a，即使用集群模式与携带密码，若不带-c设置值时报错"(error) MOVED"，不带-a时"(error) NOAUTH Authentication required."
redis-cli -c -a 123456
查看集群信息
cluster info
查看节点信息
cluster nodes
设置值时提示
Redirected to slot [741] located at 192.168.3.16:6379
其中slot代表"槽"，使用集群模式时，向redis中设置值时会将key-value存储于不同的master中
slot = hash(key) % 16384
在搭建集群模式时对每个master都划分了一段slot的范围，设置值时使用key计算得到slot，然后重定向到该slot对应的master节点进行设置值

缓存穿透：请求不经过redis缓存，直接请求数据库
缓存穿透之布隆过滤器：迅速判断元素是否在一个集合中。可能误判，不可删除某一个key，代码复杂度增加
缓存雪崩：当缓存在同一时间大量过期失效。请求全部访问DB，导致DB压力过大甚至崩溃。
缓存雪崩预防：
1.永不过期，手动清理缓存
2.错开过期时间，不要再同一时间过期
3.使用多个缓存中间件结合使用
4.采购第三方的Redis
缓存穿透、缓存雪崩：大流量直接请求到数据库，导致数据库不可用



